                                  HTTP1.1 vs HTTP2

HTTP is a network delay sensitive protocol in the sense that if there is less network delay, then the page loads faster.
HTTP2 is much faster and more reliable than HTTP1. HTTP1 loads a single request for every TCP connection, while HTTP2 avoids
network delay by using multiplexing. 
Header CompressionHeaders are sent on every request leading to a lot of duplicate data being sent uncompressed across the wire.
Header compression is included by default in HTTP/2 using HPACK.Performance OptimizationProvides support for caching to deliver
pages faster.Spriting, concatenating, inlining, domain sharding are some of the optimizations used as a workaround to the
‘six connections per host’ rule.Removes the need for unnecessary optimization hacks.Protocol TypeText based protocol that is 
in the readable form.It is a binary protocol (HTTP requests are sent in the form of 0s and 1s). Needs to be converted back from
binary in order to read it.SecuritySSL is not required but recommended. Digest authentication used in HTTP1.1 is an improvement
over HTTP1.0. HTTPS uses SSL/TLS for secure encrypted communication.Though security is still not mandatory, it is mostly encrypted 
(though it is not enforced) since almost all clients require traffic to be encrypted. It also has some minimum standards, such as 
minimum key size for encryption. TLS 1.2 etc..

KEY FETAURES:
HTTP1.1:
It supports connection reuse i.e. for every TCP connection there could be multiple requests and responses, and pipelining where the
client can request several resources from the server at once. However, pipelining was hard to implement due to issues such as
head-of-line blocking and was not a feasible solution.

HTTP2:
Uses multiplexing, where over a single TCP connection resources to be delivered are interleaved and arrive at the client almost at
the same time. It is done using streams which can be prioritized, can have dependencies and individual flow control. 
It also provides a feature called server push that allows the server to send data that the client will need but has not
 yet requested.

 STATUS CODE:
HTTP1.1:
Introduces a warning header field to carry additional information about the status of a message.
Can define 24 status codes, error reporting is quicker and more efficient.

HTTP2:
Underlying semantics of HTTP such as headers, status codes remains the same.
 
AUTHENTICATION MECHANISM:
HTTP1.1:
It is relatively secure since it uses digest authentication, NTLM authentication.

HTTP2:
Security concerns from previous versions will continue to be seen in HTTP/2.
However, it is better equipped to deal with them due to new TLS features like
 connection error of type Inadequate_Security.

 CACHING:
 HTTP1.1:
 Expands on the caching support by using additional headers like cache-control,
conditional headers like If-Match and by using entity tags.

HTTP2:
HTTP/2 does not change much in terms of caching. With the server push feature 
if the client finds the resources are already present in the cache, it can cancel the pushed stream.

WEB TRAFFIC:
HTTP1.1:
HTTP/1.1 provides faster delivery of web pages and reduces web traffic as compared to HTTP/1.0.
However, TCP starts slowly and with domain sharding (resources can be downloaded simultaneously
by using multiple domains), connection reuse and pipelining, there is an increased risk of network congestion.

HTTP2:
HTTP/2 utilizes multiplexing and server push to effectively reduce the page load time by a greater margin along
with being less sensitive to network delays.

Objects And Its Internal Representation In JavaScript:


Objects in JavaScript may be defined as an unordered collection of related data, of primitive or reference types, in the form of “key: value” pairs. These keys can be variables or functions and are called properties and methods, respectively, in the context of an object.

How are objects represented in JavaScript?

An object can be created with figure brackets {…} with an optional list of properties. A property is a “key: value” pair, where a key is a string (also called a “property name”), and value can be anything.
 
 simple program for object:

const personObj = {
    name: 'Sanjay',
    age: 30,
    age: 45,
    dob: 'yyyy-mm-dd',
    origin: 'asian',
    nationality: "indian",
    skills: ["Singing", "Dancing"],  
    bio: {
      height: 188,
      weight: 90,
    }
  }
  
  console.log(personObj);
  // Accessing Values
  // Square bracket way
  console.log(personObj["origin"]);
  
  // dot accessing
  console.log(personObj.origin);
  
  console.log(personObj['aadhar']);
  
  console.log(personObj.aadhar);
  
  console.log(personObj.skills);
  console.log(personObj.bio.height)
  ______________________________________________________________________________________________________________________________________

  output:
  (7) {name: "Sanjay", age: 45, dob: "yyyy...}
name
:
"Sanjay"
age
:
45
dob
:
"yyyy-mm-dd"
origin
:
"asian"
nationality
:
"indian"
skills
:
(2) ["Singing", "Dancing"]
bio
:
(2) {height: 188, weight: 90}
asian
asian
undefined
undefined
(2) ["Singing", "Dancing"]
0
:
"Singing"
1
:
"Dancing"
188
________________________________________________________________________________________________________________________________________
ITERATION OF OBJECT:
const personObj = {
    name: 'Sanjay',
    age: 30,
    age: 45,
    dob: 'yyyy-mm-dd',
    origin: 'asian',
    nationality: "indian",
    skills: ["Singing", "Dancing"],  
    bio: {
      height: 188,
      weight: 90,
    }
  }
for (var key in personObj) {
  console.log(key + ' ----> ' + personObj[key]);
}

const students = [
  { name: "Sam", age: 14 },
  { name: "Danny", age: 15 },
]
// Iteration of Objects

// Output name --> Sanjay .....
// for in
for (var x in personObj) {
  console.log(x + ' ----> ' + personObj[x]);
}

// Object.keys ---> O capital
// console.log(Object.keys(personObj));

for (var key of Object.keys(personObj)) {
  console.log(key + ' ---> ' + personObj[key]);
}

console.log(Object.values(personObj));
________________________________________________________________________________________________________________________________________
Output:
name ----> Sanjay
age ----> 45
dob ----> yyyy-mm-dd
origin ----> asian
nationality ----> indian
skills ----> Singing,Dancing
bio ----> [object Object]
name ----> Sanjay
age ----> 45
dob ----> yyyy-mm-dd
origin ----> asian
nationality ----> indian
skills ----> Singing,Dancing
bio ----> [object Object]
name ---> Sanjay
age ---> 45
dob ---> yyyy-mm-dd
origin ---> asian
nationality ---> indian
skills ---> Singing,Dancing
bio ---> [object Object]
(7) ["Sanjay", 45, "yyyy-mm-dd", "asian"...]
0
:
"Sanjay"
1
:
45
2
:
"yyyy-mm-dd"
3
:
"asian"
4
:
"indian"
5
:
(2) ["Singing", "Dancing"]
6
:
(2) {height: 188, weight: 90}